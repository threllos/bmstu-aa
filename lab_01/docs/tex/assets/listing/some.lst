package levenshtein

type Levenshtein struct {
	runes1 []rune
	runes2 []rune
}

func Make(str1, str2 string) Levenshtein {
	return Levenshtein{[]rune(str1), []rune(str2)}
}

func (l Levenshtein) cutRune(c1, c2 int) Levenshtein {
	l1, l2 := l.lens()
	return Levenshtein{l.runes1[:l1-c1], l.runes2[:l2-c2]}
}

func (l Levenshtein) lens() (int, int) {
	return len(l.runes1), len(l.runes2)
}

func (l Levenshtein) isEmpty() bool {
	return len(l.runes1) == 0 || len(l.runes2) == 0
}

func (l Levenshtein) isEqualRunes(i, j int) int {
	if l.runes1[i] == l.runes2[j] {
		return 0
	}
	return 1
}

func (l Levenshtein) dlFlag(i, j int) bool {
	if i <= 1 {
		return false
	} else if j <= 1 {
		return false
	} else if l.runes1[i-1] != l.runes2[j-2] {
		return false
	} else if l.runes1[i-2] != l.runes2[j-1] {
		return false
	}
	return true
}