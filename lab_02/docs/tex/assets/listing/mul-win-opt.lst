func (m1 Matrix) MulWinogradOptimized(m2 Matrix) (Matrix, error) {
	res, _ := Create(m1.rows, m2.columns)
	rf := m1.rowFactorOptimized()
	cf := m2.columnFactorOptimized()
	for i := 0; i < m1.rows; i++ {
		for j := 0; j < m2.columns; j++ {
			res.data[i][j] -= rf[i] + cf[j]
			for k := 1; k < m1.columns; k += 2 {
				res.data[i][j] += ((m1.data[i][k-1] + m2.data[k][j]) *
					(m1.data[i][k] + m2.data[k-1][j]))
			}
		}
	}
	if m1.columns&1 != 0 {
		for i := 0; i < m1.rows; i++ {
			for j := 0; j < m2.columns; j++ {
				res.data[i][j] += (m1.data[i][m1.columns-1] *
					m2.data[m1.columns-1][j])
			}
		}
	}
	return res, nil
}